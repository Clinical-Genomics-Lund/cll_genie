{"version":3,"sources":["components/Select.js","components/Button.js","components/DataSelection.js","components/Plots.js","fetch.js","App.js","index.js"],"names":["Select","classNames","onChange","options","selectedOption","className","join","value","disabled","map","opt","label","Button","text","onClick","buttonClassNames","defaultProps","DataSelection","assayNames","selectedAssay","selectedTimeInterval","timeRanges","title","monthDelta","btn","Plots","plotData","assay","assays","yaxis","xaxis","plotType","mode","x","point","creation_date","y","parseFloat","qc","mean_coverage","subassay","parseInt","ins_size","dup_pct","gc_drop","key","at_drop","pf_error_rate","contamination","plot","includes","data","layout","request","url","params","a","method","headers","objectToQueryString","body","JSON","stringify","fetch","response","status","generateErrorResponse","json","result","obj","Object","keys","message","Error","get","apiUrl","fetchAssayNames","res","fetchSamples","App","queryParams","URLSearchParams","window","location","search","useState","assayInfo","setAssayInfo","sampleData","setSampleData","setSelectedAssay","setSelectedTimeInterval","useEffect","getAssayInfo","getSamplesInfoFromEvent","event","target","getSamplesInfo","has_qc","getSampleInfoTimeDelta","months","timeLimit","Date","setMonth","getMonth","filter","sample","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA0BeA,EAvBA,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eAC9C,OACE,yBACEC,UAAWJ,EAAWK,KAAK,KAC3BJ,SAAUA,EACVK,MAA0B,OAAnBH,EAA0B,UAAYA,EAH/C,UAIE,wBAAQG,MAAM,UAAUC,UAAQ,EAAhC,6BAGa,OAAZL,GAAoBA,EAAQM,KAAI,SAACC,GAAD,OAC/B,wBAAwBH,MAAOG,EAAIH,MAAnC,SAA2CG,EAAIC,OAAlCD,EAAIH,c,SCXnBK,EAAS,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMZ,EAAmC,EAAnCA,WAAYa,EAAuB,EAAvBA,QAASN,EAAc,EAAdA,SACpCO,EAAmB,CAAC,OAAD,mBAAWd,IAAYK,KAAK,KAErD,OACE,wBACED,UAAWU,EACXD,QAASA,EACTN,SAAUA,EAHZ,SAIEK,KAIND,EAAOI,aAAe,CACpBf,WAAY,GACZO,UAAU,GAUGI,QCYAK,EAjCO,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,WAAYhB,EAA4D,EAA5DA,SAAUY,EAAkD,EAAlDA,QAASK,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,qBAG9DC,EAAa,CACjB,CAACC,MAAO,MAAOC,WAAY,MAC3B,CAACD,MAAO,UAAWC,YAAY,IAC/B,CAACD,MAAO,SAAUC,YAJL,IAKb,CAACD,MAAO,QAASC,YAAY,IAG/B,OACE,sBAAKlB,UAAU,iBAAf,UACE,cAAC,EAAD,CACAJ,WAZU,CAAC,QAaXC,SAAUA,EACVC,QAASe,EACTd,eAAgBe,IAEfE,EAAWZ,KAAI,SAACe,GAAD,OACd,cAAC,EAAD,CACEX,KAAMW,EAAIF,MACVR,QAAS,WAAOA,EAAQU,EAAID,aAC5Bf,SAAUgB,EAAID,aAAeH,W,kBCzBjCK,EAAQ,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAyIxB,MAxIc,CACZ,CACEL,MAAO,mBACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,cAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGC,kBACvD1B,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACElB,MAAO,kBACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,cAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOO,SAASP,EAAMI,GAAGI,aACrD7B,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACElB,MAAO,uBACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,iBAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGK,YACvD9B,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACElB,MAAO,UACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,KAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGM,YACvD/B,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACEK,IAAK,EACLvB,MAAO,UACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,KAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGQ,YACvDjC,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACElB,MAAO,cACPM,OAAQ,CAAC,OACTC,MAAO,CACLP,MAAO,KAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGS,kBACvDlC,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,eAInE,CACElB,MAAO,gBACPM,OAAQ,CAAC,SACTC,MAAO,CACLP,MAAO,KAETQ,MAAO,CACLR,MAAO,SAETI,SAAU,CACRK,SAAU,UACVC,KAAM,UACNC,EAAGP,EAASjB,KAAI,SAACyB,GAAW,OAAOA,EAAMC,iBACzCC,EAAGV,EAASjB,KAAI,SAACyB,GAAW,OAAOG,WAAWH,EAAMI,GAAGU,kBACvDnC,KAAMa,EAASjB,KAAI,SAACyB,GAClB,MAAM,cAAN,OAAqBA,EAAM,aAA3B,wBAAuDA,EAAMM,gBAM7D/B,KAAK,SAACwC,GAAD,OACRA,EAAKrB,OAAOsB,SAAS,QAAUD,EAAKrB,OAAOsB,SAASvB,KACrD,qBAAKtB,UAAU,OAAf,SACE,cAAC,IAAD,CACE8C,KAAM,CAACF,EAAKvB,UACZ0B,OAAS,CAAC9B,MAAO2B,EAAK3B,MAAOQ,MAAOmB,EAAKnB,MAAOD,MAAOoB,EAAKpB,eAOtEJ,EAAMT,aAAe,CACnBU,SAAU,IAGGD,Q,SCzJA4B,E,gFAAf,WAAwBC,EAAKC,GAA7B,iCAAAC,EAAA,6DAAqCC,EAArC,+BAA8C,MAEtCtD,EAAU,CACdsD,SACAC,QAAS,CACP,eAAgB,qBAKhBH,IACa,QAAXE,EACFH,GAAO,IAAMK,EAAoBJ,GAEjCpD,EAAQyD,KAAOC,KAAKC,UAAUP,IAdpC,SAkByBQ,MAAMT,EAAKnD,GAlBpC,UAoB0B,OAFlB6D,EAlBR,QAoBeC,OApBf,yCAqBWC,EAAsB,oDArBjC,wBAuBuBF,EAASG,OAvBhC,eAuBQC,EAvBR,yBA0BSA,GA1BT,6C,sBA+BO,SAAST,EAAqBU,GACnC,OAAOC,OAAOC,KAAKF,GAAK5D,KAAI,SAAAoC,GAAG,OAAIA,EAAM,IAAMwB,EAAIxB,MAAMvC,KAAK,KAIhE,SAAS4D,EAAuBM,GAC9B,OAAO,IAAIC,MAAM,CACfR,OAAQ,QACRO,YAIG,SAASE,EAAKpB,EAAKC,GACxB,OAAOF,EAAQC,EAAKC,G,WCxChBoB,EAAS,yCAGTC,EAAe,uCAAG,4BAAApB,EAAA,sEACJO,MAAM,GAAD,OAAIY,EAAJ,YADD,cAChBE,EADgB,yBAEfA,EAAIV,QAFW,2CAAH,qDAKfW,EAAY,uCAAG,WAAOvB,GAAP,eAAAC,EAAA,sEACDkB,EAAI,GAAD,OAChBC,EADgB,YACEpB,GAFJ,cACbsB,EADa,yBAGZA,GAHY,2CAAH,sDA+EHE,EAzEH,WAEV,IAAMC,EAAc,IAAIC,gBAAgBC,OAAOC,SAASC,QAExD,EAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,MAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0CJ,mBAASL,EAAYN,IAAI,UAAnE,mBAAOvD,EAAP,KAAsBuE,EAAtB,KACA,EAAwDL,mBAAS,MAAjE,mBAAOjE,EAAP,KAA6BuE,EAA7B,KAGAC,qBAAU,YACU,uCAAG,4BAAApC,EAAA,sEACAoB,IADA,OACbzB,EADa,OAEnBoC,EAAapC,GAFM,2CAAH,qDAIlB0C,KACC,IAGH,IAAMC,EAAuB,uCAAG,WAAOC,GAAP,eAAAvC,EAAA,sDACxB7B,EAAQoE,EAAMC,OAAOzF,MAC3BmF,EAAiB/D,GACjBsE,EAAetE,GAHe,2CAAH,sDAMvBsE,EAAc,uCAAG,WAAOtE,GAAP,eAAA6B,EAAA,sEACFsB,EAAa,CAC9BnD,MAAOA,EACPuE,QAAQ,IAHW,OACf/C,EADe,OAKrBsC,EAActC,GALO,2CAAH,sDAQdgD,EAAsB,uCAAG,WAAOC,GAAP,iBAAA5C,EAAA,6DAC7BmC,EAAwBS,GADK,SAEVtB,EAAa,CAC9BnD,MAAOR,EAAe+E,QAAQ,IAHH,OAEvB/C,EAFuB,OAKb,OAAXiD,EACHX,EAActC,KAGRkD,EAAY,IAAIC,MACZC,SAASF,EAAUG,WAAaJ,GAE1CX,EAActC,EAAKsD,QAAO,SAACC,GACzB,OAAOL,EAAY,IAAIC,KAAKI,EAAOvE,oBAbV,2CAAH,sDAuB5B,OAJAyD,qBAAU,WACU,OAAlBzE,GAA0B8E,EAAe9E,KACxC,IAGD,sBAAKd,UAAU,YAAf,UACE,gDAAsC,OAAlBc,GAAA,YAA+BA,MACnD,cAAC,EAAD,CACAD,WAAYoE,EACZpF,SAAU4F,EACVhF,QAASqF,EACThF,cAAeA,EACfC,qBAAsBA,IACN,OAAfoE,EACC,cAAC,EAAD,CAAO9D,SAAU8D,EAAY7D,MAAOR,IACpC,2ECpFRwF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a14b485e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Select = ({classNames, onChange, options, selectedOption}) => {\n  return (\n    <select \n      className={classNames.join(\" \")} \n      onChange={onChange} \n      value={selectedOption === null ? 'default' : selectedOption}>\n      <option value=\"default\" disabled>\n        Select analysis\n      </option>\n      {options !== null && options.map((opt) => (\n        <option key={opt.value} value={opt.value}>{opt.label}</option>\n      ))}\n    </select>\n  )\n}\n\nSelect.propTypes = {\n  classNames: PropTypes.array,\n  onChange: PropTypes.func,\n  options: PropTypes.array,\n  selectedOption: PropTypes.string,\n}\n\nexport default Select","import PropTypes from 'prop-types'\n\nconst Button = ({text, classNames, onClick, disabled}) => {\n  const buttonClassNames = ['btn', ...classNames].join(' ')\n\n  return (\n    <button \n      className={buttonClassNames}\n      onClick={onClick}\n      disabled={disabled}\n    >{text}</button>\n  )\n}\n\nButton.defaultProps = {\n  classNames: [],\n  disabled: false,\n}\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  classNames: PropTypes.array,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n}\n\nexport default Button","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Select from './Select'\nimport Button from './Button'\n\nconst DataSelection = ({assayNames, onChange, onClick, selectedAssay, selectedTimeInterval}) => {\n  const names = ['test']\n  const months = -12\n  const timeRanges = [\n    {title: \"All\", monthDelta: null},\n    {title: \"3 Years\", monthDelta: 3 * months},\n    {title: \"1 Year\", monthDelta: months},\n    {title: \"6 Mon\", monthDelta: 0.5 * months},\n  ]\n\n  return (\n    <div className='data-selection'>\n      <Select \n      classNames={names} \n      onChange={onChange} \n      options={assayNames}\n      selectedOption={selectedAssay}\n      />\n      {timeRanges.map((btn) => (\n        <Button \n          text={btn.title}\n          onClick={() => {onClick(btn.monthDelta)}}\n          disabled={btn.monthDelta === selectedTimeInterval}\n        />\n      ))}\n    </div>\n  )\n}\n\nDataSelection.propTypes = {\n\n}\n\nexport default DataSelection\n","import Plot from 'react-plotly.js'\n\nconst Plots = ({plotData, assay}) => {\n  const plots = [\n    {\n      title: \"MedeltÃ¤ckning\",\n      assays: ['all'],\n      yaxis: {\n        title: \"X coverage\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: { \n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.mean_coverage)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      title: \"Fragmentstorlek\", \n      assays: ['all'],\n      yaxis: {\n        title: \"base pairs\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseInt(point.qc.ins_size)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      title: \"Duplikation mÃ¤ngd\",\n      assays: ['all'],\n      yaxis: {\n        title: \"% duplication\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.dup_pct)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      title: \"GC-drop\",\n      assays: ['wgs'],\n      yaxis: {\n        title: \"%\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.gc_drop)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      key: 5,\n      title: \"AT-drop\",\n      assays: ['wgs'],\n      yaxis: {\n        title: \"%\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.at_drop)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      title: \"Felfrekvens\",\n      assays: ['wgs'],\n      yaxis: {\n        title: \"%\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.pf_error_rate)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n    {\n      title: \"Kontamination\",\n      assays: ['exome'],\n      yaxis: {\n        title: \"%\"\n      },\n      xaxis: {\n        title: \"Datum\"\n      },\n      plotData: {\n        plotType: \"scatter\", \n        mode: \"markers\",\n        x: plotData.map((point) => {return point.creation_date}), \n        y: plotData.map((point) => {return parseFloat(point.qc.contamination)}),\n        text: plotData.map((point) => {\n          return `sample id: ${point['sample-id']}; sub-assay: ${point.subassay}`\n        })\n      }\n    },\n  ]\n  return (\n    plots.map( (plot) => ( \n      (plot.assays.includes('all') || plot.assays.includes(assay) ) &&\n      <div className=\"plot\">\n        <Plot \n          data={[plot.plotData]} \n          layout={ {title: plot.title, xaxis: plot.xaxis, yaxis: plot.yaxis} }\n        />\n      </div>\n    ))\n  )\n}\n\nPlots.defaultProps = {\n  plotData: []\n}\n\nexport default Plots\n","// Fetch.js\n// functions for making api requests to Gens\n\nasync function request (url, params, method = 'GET') {\n  // options passed to hte fetch request\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // handle params\n  if (params) {\n    if (method === 'GET') {\n      url += '?' + objectToQueryString(params)\n    } else {\n      options.body = JSON.stringify(params)\n    }\n  }\n  // fetch returns a promise\n  const response = await fetch(url, options)\n\n  if (response.status !== 200) {\n    return generateErrorResponse('The server responded with an unexpected status.')\n  }\n  const result = await response.json()\n\n  // returns a single Promise object\n  return result\n}\n\n// converts an object into a query string\n// ex {region: 8:12-55} --> &region=8:12-55\nexport function objectToQueryString (obj) {\n  return Object.keys(obj).map(key => key + '=' + obj[key]).join('&')\n}\n\n//  A generic error handler that just returns an object with status=error and message\nfunction generateErrorResponse (message) {\n  return new Error({\n    status: 'error',\n    message\n  })\n}\n\nexport function get (url, params) {\n  return request(url, params)\n}\n\nexport function create (url, params) {\n  return request(url, params, 'POST')\n}\n\nexport function update (url, params) {\n  return request(url, params, 'PUT')\n}\n\nexport function remove (url, params) {\n  return request(url, params, 'DELETE')\n}","import DataSelection from \"./components/DataSelection\"\nimport Plots from \"./components/Plots\"\nimport { get } from './fetch'\n\nimport { useState, useEffect } from 'react'\nimport { getAllByPlaceholderText } from \"@testing-library/react\"\n\nconst apiUrl = 'http://mtlucmds1.lund.skane.se/cdm/api'\n//const apiUrl = 'http://localhost:3010'\n\nconst fetchAssayNames = async () => {\n  const res = await fetch(`${apiUrl}/assays`)\n  return res.json()\n}\n\nconst fetchSamples = async (params) => {\n  const res = await get(\n    `${apiUrl}/samples`, params)\n  return res\n}\n\nconst App = () => {\n  // get query parameters from url\n  const queryParams = new URLSearchParams(window.location.search)\n\n  const [assayInfo, setAssayInfo] = useState(null)\n  const [sampleData, setSampleData] = useState(null)\n  const [selectedAssay, setSelectedAssay] = useState(queryParams.get('assay'))\n  const [selectedTimeInterval, setSelectedTimeInterval] = useState(null)\n\n  // fetch assay info from database\n  useEffect(() => {\n    const getAssayInfo = async () => {\n      const data = await fetchAssayNames()\n      setAssayInfo(data)\n    }\n    getAssayInfo()\n  }, [])\n\n  // fetchSampleData\n  const getSamplesInfoFromEvent = async (event) => {\n    const assay = event.target.value\n    setSelectedAssay(assay)\n    getSamplesInfo(assay)\n  }\n\n  const getSamplesInfo = async (assay) => {\n    const data = await fetchSamples({\n      assay: assay, \n      has_qc: true,\n    })\n    setSampleData(data)\n  }\n\n  const getSampleInfoTimeDelta = async (months) => {\n    setSelectedTimeInterval(months)\n    const data = await fetchSamples({\n      assay: selectedAssay, has_qc: true,\n    })\n    if ( months === null ) {\n      setSampleData(data)\n    } else {\n      // calculate the date x month ago\n      const timeLimit = new Date()\n      timeLimit.setMonth(timeLimit.getMonth() + months)\n      // filter relevant samples\n      setSampleData(data.filter((sample) => {\n        return timeLimit < new Date(sample.creation_date)\n      }))\n    }\n  }\n\n  // If an assay is specified, display plots right away\n  useEffect(() => {\n    selectedAssay !== null && getSamplesInfo(selectedAssay)\n  }, [])\n\n  return (\n    <div className='container'>\n      <h2>Quality trends{ selectedAssay !== null && `: ${selectedAssay}`}</h2>\n      <DataSelection \n      assayNames={assayInfo} \n      onChange={getSamplesInfoFromEvent} \n      onClick={getSampleInfoTimeDelta} \n      selectedAssay={selectedAssay}\n      selectedTimeInterval={selectedTimeInterval}/>\n      {sampleData !== null ? \n        <Plots plotData={sampleData} assay={selectedAssay}/> : \n        <div>Please select an assay to show plots</div>\n      }\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}